; SPDX-License-Identifier: BUSL-1.1
; Copyright (c) 2021 Fragdepth Inc.
; Based on code licensed by Fragcolor Pte. Ltd.

; DO NOT EDIT THIS FILE.
; Runtimes will always use their own starndard version and not this copy

; our versioning is floating point based, so we avoid major and minor versions.
; it is meant to be used and checked via simple equality, more than, less than.
(def version 0.1)

(def _args (eval `(assoc {} ~@*command-line-args*)))

(def _parameters {:user (if (contains? _args "--user") (get _args "--user") "0x0000000000000000000000000000000000000000")
                  :rootFolder (if (contains? _args "--rootFolder") (get _args "--rootFolder") "")
                  :immutable (if (contains? _args "--immutable") (get _args "--immutable") "immutable.edn")
                  :mutable (if (contains? _args "--mutable") (get _args "--mutable") "mutable.edn")
                  :windowTitle (if (contains? _args "--windowTitle") (get _args "--windowTitle") "Fragment")
                  :windowWidth (if (contains? _args "--windowWidth") (read-string (get _args "--windowWidth")) 1024)
                  :windowHeight (if (contains? _args "--windowHeight") (read-string (get _args "--windowHeight")) 768)
                  :clearColor (if (contains? _args "--clearColor") (read-string (get _args "--clearColor")) [7 7 7 255])
                  :xrSupported (if (contains? _args "--xrSupported") (read-string (get _args "--xrSupported")) false)
                  :metamask (if (contains? _args "--metamask") (read-string (get _args "--metamask")) false)
                  :attributes (if (contains? _args "--attributes") (read-string (get _args "--attributes")) {})
                  :description (if (contains? _args "--description") (get _args "--description") "")
                  :screenshot (if (contains? _args "--screenshot") (get _args "--screenshot") nil)
                  :screenshotDelay (if (contains? _args "--screenshotDelay") (read-string (get _args "--screenshotDelay")) 2.0)
                  :compileWebShaders (if (contains? _args "--compileWebShaders") (read-string (get _args "--compileWebShaders")) false)
                  :gatewayURL (if (contains? _args "--gateway") (get _args "--gateway") "https://cloudflare-eth.com")})

(if (not (= platform "emscripten"))
  (do
    ; fix some incompatibilities with emscripten
    (def _Emscripten.Eval Pass)
    (def _Emscripten.EvalAsync Pass)))

(def tmp-folder "tmp/")
(def base-folder (str "user/" (get _parameters :rootFolder)))

(def ipfs-gateway "https://cloudflare-ipfs.com")
(def ar-gateway "https://coldcdn.com/api/cdn/arweave")
(def fragments "0xa55e75cae979f8f2f88afbe649dcfe5a1d525711") ; MUST BE LOW CASE

(def frag-abi (slurp (str "Fragment.json")))
(def entity-abi (slurp (str "Entity.json")))

(load-file (str "shared.edn"))

(defn _decode-base64 []
  (-> (Replace ["-" "_"] ["+" "/"]) >= .b64
      (Count .b64) (Math.Mod 4)
      (Match
       [2 (-> "==" (AppendTo .b64))
        3 (-> "=" (AppendTo .b64))
        nil nil])
      .b64 (FromBase64)))

; ipfs uploader
(defn _upload-to-ipfs [type type-name]
  (Chain
   (str "upload" type-name "-to-ipfs")
   (let [boundary "----CB-IPFS-Upload-0xC0FFEE"
         gateways (vector "https://ipfs.infura.io:5001"
                          "https://ipfs.komputing.org")]
     (->
      >= .payload
      (str "--" boundary
           "\r\nContent-Disposition: form-data; name=\"path\"\r\nContent-Type: "
           type "\r\n\r\n")
      (PrependTo .payload)
      (str "\r\n--" boundary "--")
      (AppendTo .payload)
      gateways
      (TryMany
       (Chain
        "IPFS-Upload"
        >= .gateway
        "/api/v0/add?pin=true" (AppendTo .gateway)
        .payload
        (Http.Post .gateway
                   :Headers {"Content-Type" (str "multipart/form-data; boundary=" boundary)}
                   :Timeout 60))
       :Policy WaitUntil.SomeSuccess)
      (Take 0) (FromJson) (ExpectTable)
      (Take "Hash") (ExpectString)))))
(def upload-bytes-to-ipfs (_upload-to-ipfs "application/octet-stream" "bytes"))
(def upload-png-to-ipfs (_upload-to-ipfs "image/png" "png"))
(def upload-webm-to-ipfs (_upload-to-ipfs "video/webm" "webm"))

(defloop upload-screenshot
  (str tmp-folder "screenshot.png")
  (When (FS.IsFile)
        (->
         (| (Pause 2.0) ; ensure file is ready
            (| "globalThis.chainblocks.previewScreenShot()" (_Emscripten.Eval))
            (FS.Read :Bytes true)
            (BytesToString)
            (Do upload-png-to-ipfs) = .hash)
         (| (FS.Remove))
         .hash
         (Stop))))

(defloop upload-video
  (str tmp-folder "recorded-canvas-video.webm")
  (When (FS.IsFile)
        (->
         (| (Pause 2.0) ; ensure file is ready
            (FS.Read :Bytes true)
            (BytesToString)
            (Do upload-webm-to-ipfs) = .hash)
         (| (FS.Remove))
         .hash
         (Stop))))

(defn FColor
  [r g b a]
  (Color (* 255 r) (* 255 g) (* 255 b) (* 255 a)))

(def identity
  [(Float4 1 0 0 0)
   (Float4 0 1 0 0)
   (Float4 0 0 1 0)
   (Float4 0 0 0 1)])

(defblocks applyStyle []
  (Float2 15 15) (GUI.Style GuiStyle.WindowPadding)
  5.0 (GUI.Style GuiStyle.WindowRounding)
  (Float2 5 5) (GUI.Style GuiStyle.FramePadding)
  (Float2 12 8) (GUI.Style GuiStyle.ItemSpacing)
  (Float2 8 6) (GUI.Style GuiStyle.ItemInnerSpacing)
  25.0 (GUI.Style GuiStyle.IndentSpacing)
  15.0 (GUI.Style GuiStyle.ScrollbarSize)
  9.0 (GUI.Style GuiStyle.ScrollbarRounding)
  5.0 (GUI.Style GuiStyle.GrabMinSize)
  3.0 (GUI.Style GuiStyle.GrabRounding)
  (FColor 0.80 0.80 0.83 1.00) (GUI.Style GuiStyle.TextColor)
  (FColor 0.24 0.23 0.29 1.00) (GUI.Style GuiStyle.TextDisabledColor)
  (FColor 0.06 0.05 0.07 1.00) (GUI.Style GuiStyle.WindowBgColor)
  (FColor 0.07 0.07 0.09 1.00) (GUI.Style GuiStyle.ChildBgColor)
  (FColor 0.07 0.07 0.09 1.00) (GUI.Style GuiStyle.PopupBgColor)
  (FColor 0.80 0.80 0.83 0.88) (GUI.Style GuiStyle.BorderColor)
  (FColor 0.92 0.91 0.88 0.00) (GUI.Style GuiStyle.BorderShadowColor)
  (FColor 0.10 0.09 0.12 1.00) (GUI.Style GuiStyle.FrameBgColor)
  (FColor 0.24 0.23 0.29 1.00) (GUI.Style GuiStyle.FrameBgHoveredColor)
  (FColor 0.56 0.56 0.58 1.00) (GUI.Style GuiStyle.FrameBgActiveColor)
  (FColor 0.10 0.09 0.12 1.00) (GUI.Style GuiStyle.TitleBgColor)
  (FColor 1.00 0.98 0.95 0.75) (GUI.Style GuiStyle.TitleBgCollapsedColor)
  (FColor 0.07 0.07 0.09 1.00) (GUI.Style GuiStyle.TitleBgActiveColor)
  (FColor 0.10 0.09 0.12 1.00) (GUI.Style GuiStyle.MenuBarBgColor)
  (FColor 0.10 0.09 0.12 1.00) (GUI.Style GuiStyle.ScrollbarBgColor)
  (FColor 0.80 0.80 0.83 0.31) (GUI.Style GuiStyle.ScrollbarGrabColor)
  (FColor 0.56 0.56 0.58 1.00) (GUI.Style GuiStyle.ScrollbarGrabHoveredColor)
  (FColor 0.06 0.05 0.07 1.00) (GUI.Style GuiStyle.ScrollbarGrabActiveColor)
  (FColor 0.80 0.80 0.83 0.31) (GUI.Style GuiStyle.CheckMarkColor)
  (FColor 0.80 0.80 0.83 0.31) (GUI.Style GuiStyle.SliderGrabColor)
  (FColor 0.06 0.05 0.07 1.00) (GUI.Style GuiStyle.SliderGrabActiveColor)
  (FColor 0.10 0.09 0.12 1.00) (GUI.Style GuiStyle.ButtonColor)
  (FColor 0.24 0.23 0.29 1.00) (GUI.Style GuiStyle.ButtonHoveredColor)
  (FColor 0.56 0.56 0.58 1.00) (GUI.Style GuiStyle.ButtonActiveColor)
  (FColor 0.10 0.09 0.12 1.00) (GUI.Style GuiStyle.HeaderColor)
  (FColor 0.56 0.56 0.58 1.00) (GUI.Style GuiStyle.HeaderHoveredColor)
  (FColor 0.06 0.05 0.07 1.00) (GUI.Style GuiStyle.HeaderActiveColor)
  (FColor 0.00 0.00 0.00 0.00) (GUI.Style GuiStyle.ResizeGripColor)
  (FColor 0.56 0.56 0.58 1.00) (GUI.Style GuiStyle.ResizeGripHoveredColor)
  (FColor 0.06 0.05 0.07 1.00) (GUI.Style GuiStyle.ResizeGripActiveColor)
  (FColor 0.40 0.39 0.38 0.63) (GUI.Style GuiStyle.PlotLinesColor)
  (FColor 0.25 1.00 0.00 1.00) (GUI.Style GuiStyle.PlotLinesHoveredColor)
  (FColor 0.40 0.39 0.38 0.63) (GUI.Style GuiStyle.PlotHistogramColor)
  (FColor 0.25 1.00 0.00 1.00) (GUI.Style GuiStyle.PlotHistogramHoveredColor)
  (FColor 0.25 1.00 0.00 0.43) (GUI.Style GuiStyle.TextSelectedBgColor))

(defloop screenshot-grab-upload
  ; pause a bit on top to allow first iteration
  (Pause 2.0)
  ; wait JS side indefinitely here
  "globalThis.chainblocks.screenShotPromise" (_Emscripten.EvalAsync)
  ; ok we got something, let's do our job
  "globalThis.chainblocks.setCanUpload(false)" (_Emscripten.Eval)
  (str tmp-folder "screenshot.png") (GFX.Screenshot)
  (Msg "screenshot requested")
  (Detach upload-screenshot)
  (Wait upload-screenshot) >= .cid
  "globalThis.chainblocks.setScreenshotCID(\"" (PrependTo .cid) "\")" (AppendTo .cid)
  .cid (_Emscripten.Eval)
  "globalThis.chainblocks.setCanUpload(true)" (_Emscripten.Eval))

(defloop video-upload
  ; pause a bit on top to allow first iteration
  (Pause 2.0)
  ; wait JS side indefinitely here
  "window.chainblocks.videoCapturePromise" (_Emscripten.EvalAsync)
  ; ok we got something, let's do our job
  "globalThis.chainblocks.setCanUpload(false)" (_Emscripten.Eval)
  (Detach upload-video)
  (Wait upload-video) >= .cid
  "globalThis.chainblocks.setVideoCID(\"" (PrependTo .cid) "\")" (AppendTo .cid)
  .cid (_Emscripten.Eval)
  "globalThis.chainblocks.setCanUpload(true)" (_Emscripten.Eval))

(defn delayed-screenshot [name pause]
  (defchain take-screenshot
    (Pause pause)
    (str "cache/img/" name) (GFX.Screenshot)
    (Repeat
     (->
      (str "cache/img/" name)
      (FS.IsFile) (When (Is true) (-> (Return)))
      (Pause 1.0))
     :Times 10)
    0 (Exit)))

(def Main
  (Chain
   "Main" :Looped :LStack ; notice large stack size

   (Setup
    ; a flag we use later to hide loading screens
    false >= .first-load)

   ; Load a fragment from ethereum directly if the command line argument is given
   (if (contains? _args "--fragment")
     (Setup
      ; KISS: Load the fragment from the ethereum network and write it into a file to load via ChainLoader
      (__frag-load-cached (get _args "--fragment"))
      (Take "data")
      (load-fragment true)))

   (if (and (contains? _args "--entity") (contains? _args "--entity-id"))
     (Setup
      ; KISS: Load the fragment from the ethereum network and write it into a file to load via ChainLoader
      (__entity-load-cached (get _args "--entity") (get _args "--entity-id"))
      (load-fragment true)))

   (if (contains? _args "--fromFragCache")
     (Setup
      (get _args "--fromFragCache") = .b58-fragment-hash
      (ReadFile (str "cache/frag/" (get _args "--fromFragCache")))
      (ExpectLike {"data" [(Bytes "") (Bytes "")] "owner" ""} :Unsafe true)
      (Take "data")
      (load-fragment true)))

   ; our main routine, manage a bgfx window and a chain loader
   (println (str "Width " (get _parameters :windowWidth) " Height " (get _parameters :windowHeight)))
   (GFX.MainWindow
    :Title (get _parameters :windowTitle)
    :Width (get _parameters :windowWidth) :Height (get _parameters :windowHeight)
    :ClearColor (Color (nth (get _parameters :clearColor) 0)
                       (nth (get _parameters :clearColor) 1)
                       (nth (get _parameters :clearColor) 2)
                       (nth (get _parameters :clearColor) 3))
    ; prefer doing fullscreen setup JS side
    :Contents
    (->
     (Setup
      (applyStyle))
     ; branch some tasks
     ;;  (if (not (get _parameters :isSVG))
     ;;    (Branch [screenshot-grab-upload video-upload]))
     ; define out shader cache at this top level
     ; so to persist when user chain is reloaded
     (Table .shaders-cache)
     (Maybe
      (ChainLoader
       (Chain*
        ; if ethereum fragment is loaded use that
        (if (or (contains? _args "--fromFragCache")
                (or (contains? _args "--fragment")
                    (and (contains? _args "--entity") (contains? _args "--entity-id"))))
          (str tmp-folder "immutable.tmp.edn")
          (str base-folder (get _parameters :immutable)))

        ; bootstrap code to inject into the environment
        `(do
           ; so if we are the main fragment we are aware
           (def main? true)
           (def _args ~_args)
           (def base-folder ~base-folder)
           (def tmp-folder ~tmp-folder)
           (def _parameters ~_parameters)
           (def ipfs-gateway ~ipfs-gateway)
           (def ar-gateway ~ar-gateway)
           (def identity ~identity)
           (def frag-abi ~frag-abi)
           (def entity-abi ~entity-abi)
           (def fragments ~fragments)
           (load-file (str "shared.edn"))
           (load-file (str "utility.edn"))))
       :OnReload
       ; compress source to url format
       (->
        ; Don't save if we are running as fragment/entity player!
        (if (not (or (contains? _args "--fromFragCache")
                     (or (contains? _args "--fragment")
                         (and (contains? _args "--entity") (contains? _args "--entity-id")))))
          (->
            ; do some reflection to evaluate the chain
            ; mark as tainted if we access the internet
           (| (Reflect.Blocks)
              (ForEach
               (->
                (Reflect.Name)
                (Match ["Http.Get" (-> true = .taint)
                        "Http.Head" (-> true = .taint)
                        "Http.Post" (-> true = .taint)
                        "Http.Put" (-> true = .taint)
                        "Http.Patch" (-> true = .taint)
                        "Http.Delete" (-> true = .taint)
                        nil nil]))))
           .taint ?? false
           (Match [true (-> "globalThis.chainblocks.tainted = true" (_Emscripten.Eval))
                   false (-> "globalThis.chainblocks.tainted = false" (_Emscripten.Eval))])
            ; unlock the next update
          ;;  "globalThis.chainblocks.unlockCode()" (_Emscripten.Eval)
            ; source
           (str base-folder (get _parameters :immutable))
           (When
            (FS.IsFile)
            (->
              ; compress the bytes as they are, we need to hash properly
             (FS.Read)
             (EDN.Uglify
               ; hooks
              [
              ;;  "Shader" ; minimize shaders
              ;;  (->
              ;;    ; shaders might be complex and fragmentd/macro etc
              ;;    ; so just try if this works, if not pass the original
              ;;   = .sparams
              ;;   (Maybe
              ;;    (->
              ;;     .sparams (Take 0) (ExpectString) >> .sres ; Shader
              ;;     .sparams (Take 1) (ExpectString) >> .sres ; var name
              ;;     .sparams (Take 2) (ExpectString) >> .sres ; varyings
              ;;     .sparams (Take 3) (ExpectString) (Do ugly-shader) >> .sres
              ;;     .sparams (Take 4) (ExpectString) (Do ugly-shader) >> .sres
              ;;     .sres)
              ;;    (->
              ;;     .sparams)
              ;;    :Silent true))
               "load-string"
               (->
                (| (Take 0) (ExpectString) >> .lsres) ; load-string
                (| (Take 1) (ExpectString) = .ls-file-name >= .ls-file-name-full >> .lsres) ; file-name
                .ls-file-name (Log "String file to store")
                base-folder (PrependTo .ls-file-name-full)
                .ls-file-name-full (FS.Read :Bytes false) (Set .fs .ls-file-name)
                .lsres)
               "load-bytes"
               (->
                (| (Take 0) (ExpectString) >> .lbres) ; load-string
                (| (Take 1) (ExpectString) = .lb-file-name >= .lb-file-name-full >> .lbres) ; file-name
                .lb-file-name (Log "String file to store")
                base-folder (PrependTo .lb-file-name-full)
                .lb-file-name-full (FS.Read :Bytes true) (Set .fs .lb-file-name)
                .lbres)]) (Set .fs ".s") ; main script = .s
             version (Set .fs ".v")
             ; enviruments are not hashed here, so we can add structured data
             ; the thing to keep in mind here is that we don't wanna depends on IPFS metadata AT ALL
             (if (not (empty? (keys (get _parameters :attributes))))
               (-> (get _parameters :attributes) (Set .environment "a")))
             (if (not (= "" (get _parameters :description)))
               (-> (get _parameters :description) (Set .environment "d")))
             (get _parameters :windowTitle) (Set .environment "t")
             (get _parameters :windowWidth) (Set .environment "w")
             (get _parameters :windowHeight) (Set .environment "h")
             (slurp (str base-folder (get _parameters :mutable))) (EDN.Uglify) (Set .environment "e")
             ; compress and write
             .fs (ToBytes) (Brotli.Compress :Quality 11) = .compressed-bytes >> .local-fragment
             ; sign the immutable data to be able to verify it, this way we can authenticate the minting source
             "runtime-key.txt" (FS.IsFile)
             (When (Is true)
                   (-> "runtime-key.txt" (FS.Read :Bytes false) = .pkey
                       .compressed-bytes (Hash.Keccak-256) (ECDSA.Sign .pkey) (Set .environment "s")
                       (Msg "Signed with runtime key")))
             .environment (ToBytes) (Brotli.Compress :Quality 11) = .compressed-env >> .local-fragment
             .local-fragment (Set .frag-data "data")
             (get _parameters :owner) (Set .frag-data "owner")
             (| (Await
                 (->
                  (str tmp-folder "live-chain-binary")
                  (FS.Write .compressed-bytes :Overwrite true)
                  (str tmp-folder "live-chain-env-binary")
                  (FS.Write .compressed-env :Overwrite true)
                  .compressed-bytes
                  (Hash.Keccak-256)
                  ; take 20 bytes like ETH
                  (ToHex) (Slice :From 26) >= .eth-id
                  "0x" (PrependTo .eth-id)
                  .eth-id (HexToBytes) (ToBase58) = .b58-eth-id
                  (str tmp-folder "live-chain-eth-id")
                  (FS.Write .b58-eth-id :Overwrite true)
                  ; also cache locally in order to load it from other files!
                  (str "cache/frag/") >= .cached-name
                  .b58-eth-id (AppendTo .cached-name)
                  .frag-data (WriteFile .cached-name :Flush true)))
                  ;;  "globalThis.chainblocks.setCanUpload(true)" (_Emscripten.Eval)
                )
             (Count .compressed-bytes) (Log "compressed source size")
             (Count .compressed-env) (Log "compressed env size")))))
              ; flag first load
        true > .first-load)
       :OnError
       (->
        ; display some error feedback
        (Msg "User chain failed.")
        "globalThis.chainblocks.errorDetected()" (_Emscripten.Eval)))
      ; if chain fails pause a bit
      (->
       ; report error and pause
       (Msg "User chain failed.")
       "globalThis.chainblocks.errorDetected()" (_Emscripten.Eval)
       (Pause 2.0)))
     .first-load
     (When
      (Is true)
      (->
       (Setup
        "globalThis.chainblocks.firstFrameDone()" (_Emscripten.Eval))
       ; this code runs when we really loaded after the first frame
       (if (not (nil? (get _parameters :screenshot)))
         (->
          (Step (delayed-screenshot (get _parameters :screenshot) (get _parameters :screenshotDelay)))))))))))

(if (= platform "emscripten")
  (do
    ; this one is ticked and scheduled from the JS side
    (set-global-chain Main))
  ; else
  (do
    (println "Starting")
    (defnode Root)
    (schedule Root Main)
    (run Root 0.016666666666667)))


