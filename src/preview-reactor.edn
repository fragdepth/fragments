; SPDX-License-Identifier: BUSL-1.1
; Copyright Â© 2021 Fragcolor Pte. Ltd.

; how many seconds to wait to assume blocks are final
(def finality-time 15)
(def width "512")
(def height "512")
(def remote-storage "https://img.fragments.foundation")
; our geth node
;; (def node-ws "ws://127.0.0.1:8545")
;; (def node-http "http://127.0.0.1:8545")
; rinkeby
(def node-ws "wss://rinkeby.infura.io/ws/v3/f1f1f88885f54de7955ce248e1d69046")
(def node-http "https://rinkeby.infura.io/v3/f1f1f88885f54de7955ce248e1d69046")
(def entity-contract "0x99e9522622bc33740005dca422c57e78bea996d2") ; MUSE BE LOWCASE

;-----------------

(def _args (eval `(assoc {} ~@*command-line-args*)))

(def _parameters {:rootFolder (if (contains? _args "--rootFolder") (get _args "--rootFolder") "")})

(if (not (= platform "emscripten"))
  (do
    ; fix some incompatibilities with emscripten
    (def _Emscripten.Eval Pass)
    (def _Emscripten.EvalAsync Pass)))

(def tmp-folder "tmp/")
(def base-folder (str "user/" (get _parameters :rootFolder)))

(def entity-abi (slurp (str "Entity.json")))
(def frag-abi (slurp (str "Fragment.json")))

(load-file (str "shared.edn"))

(defnode main)

(defloop events-listener
  (Setup
   (Sequence
    .events
    :Types [[Type.Bytes] Type.Int]
    :Global true)

   (Eth node-ws) ; we need websockets to wait for events
   (Eth.Contract :Contract entity-contract
                 :Abi (slurp "Entity.json")))

  (Eth.WaitEvent :Event "Transfer")
  (Log "Event")
  (| (Take "transaction_hash") = .tx-hash)
  (| (Take "topics")
     (| (Take 1) (BigInt) (BigInt.ToString) = .fromAddr)
     (| (Take 3) (BigInt) (BigInt.ToString) = .tokenId))
  .fromAddr
  (Log "from")
  (When (Is "0") ; mint
        (->
         .tokenId (Log "Queued preview of")
         (Time.EpochMs) (Math.Add (* finality-time 1000)) = .time ; wait to ensure finality/inclusion
         [[.tx-hash .tokenId] .time] >> .events)))

(defchain produce-screenshot
  (ExpectString) = .requestedId

  node-http = .current-rpc-server

  .requestedId (BigInt) (BigInt.ToBytes) = .bid
  [.bid] (Eth.EncodeCall entity-abi "getData") (ToHex) = .callData
  (__eth-call entity-contract .callData node-http)
  (Eth.DecodeCall entity-abi "getData")
  (Take 0) (ExpectBytes) (ToBase58) = .env-hash

  "entry.edn" >> .args
  "--entity" >> .args
  entity-contract (HexToBytes) (ToBase58) >> .args
  "--entity-id" >> .args
  .requestedId >> .args
  "--gateway" >> .args
  node-http >> .args
  "--windowWidth" >> .args
  width >> .args
  "--windowHeight" >> .args
  height >> .args
  "--screenshot" >> .args
  [.requestedId entity-contract .env-hash] (Hash.Keccak-256) (ToBase58) >= .cname
  ".png" (AppendTo .cname)
  .cname >> .args
  "--screenshotDelay" >> .args
  "2.0" >> .args
  "" (Process.Run *cbl* .args :Timeout 20)

  "cache/img/" >= .fpath
  .cname (AppendTo .fpath)
  .fpath (FS.Read :Bytes true) = .payload

  {"key" (slurp "../secrets/preview-key.txt")
   "name" .cname
   "payload" .payload} (ToBytes)
  (Http.Post remote-storage) (Log)

  ; upload to nft.storage
  ;; "cache/img/" (PrependTo .cname)
  ;; .cname (FS.Read :Bytes true) (Http.Post "https://api.nft.storage/upload" :Headers
  ;;                                         {"accept" "application/json"
  ;;                                          "Authorization" "Bearer <KEY HERE>"
  ;;                                          "Content-Type" "image/*"}) (FromJson) (ExpectTable)
  ;; (Log "Uploaded screenshot")
  ;; (Take "value") (ExpectTable) (Take "cid") (ExpectString) = .cid
  ;; (Log)
  ;
  )

(defloop tx-scraper
  (Setup
   (Sequence
    .events
    :Types [[Type.Bytes] Type.Int]
    :Global true
    ; avoid clearing/data race with listener
    :Clear false)

   ; we are fine with http for this
   (Eth node-http))

  (Time.Pop .events)
  (Log "Processing")
  (| (Take 0) = .tx-hash)
  (| (Take 1) = .tokenId)
  (Maybe (->
          ; can be reordered!
          ; and can also be not included so we do this check here to make sure it's a real one
          .tx-hash
          (Eth.Transaction)
          (Log "Tx")
          ; from now on generate screenshot by spawning a new process
          .tokenId (Spawn produce-screenshot)
          ; let's give ourself a small pause to avoid flooding the node
          (Pause 2.0))))

;; (defchain test
;;   "1" (Spawn produce-screenshot))

;; (schedule main test)
(schedule main events-listener)
(schedule main tx-scraper)

(run main 0.1)