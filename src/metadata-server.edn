; SPDX-License-Identifier: BUSL-1.1
; Copyright (c) 2021 Fragdepth Inc.
; Based on code licensed by Fragcolor Pte. Ltd.

(def _args (eval `(assoc {} ~@*command-line-args*)))

(def _parameters {:rootFolder (if (contains? _args "--rootFolder") (get _args "--rootFolder") "")
                  :port (if (contains? _args "--port") (read-string (get _args "--port")) 7070)
                  :cache (if (contains? _args "--cache") (read-string (get _args "--cache")) true)
                  :gatewayURL (if (contains? _args "--gateway") (get _args "--gateway") "https://cloudflare-eth.com")})

(if (not (= platform "emscripten"))
  (do
    ; fix some incompatibilities with emscripten
    (def _Emscripten.Eval Pass)
    (def _Emscripten.EvalAsync Pass)))

(def tmp-folder "tmp/")
(def base-folder (str "user/" (get _parameters :rootFolder)))

(def frag-abi (slurp (str "Fragment.json")))
(def entity-abi (slurp (str "Entity.json")))

(load-file (str "shared.edn"))

(def main-rpc "https://cloudflare-eth.com")
(def rinkeby-rpc "https://rinkeby.infura.io/v3/f1f1f88885f54de7955ce248e1d69046")
(def goerli-rpc "https://goerli.infura.io/v3/f1f1f88885f54de7955ce248e1d69046")

(def fragments "0xa55e75cae979f8f2f88afbe649dcfe5a1d525711")

; need those for multi-threading wasm
(def headers {"Cross-Origin-Opener-Policy" "same-origin"
              "Cross-Origin-Embedder-Policy" "require-corp"})

(defnode Root)

(def license-commercial-use "CC BY-SA 4.0")
(def license-non-commercial-use "CC BY-NC-ND 4.0")
(def img-server "https://img.fragments.foundation/")
(def play-server "https://play.fragments.foundation/")
(def embed-server "https://embed.fragments.foundation/")
(def uint256-max "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")

(defn set-rpc-server []
  (-> (| (Take 1) = .chainId
         (| (BigInt) (BigInt.ToString) = .chainIdString)
         (Match ["0x01" (-> main-rpc)
                 "0x04" (-> rinkeby-rpc)
                 "0x05" (-> goerli-rpc)]
                :Passthrough false) = .current-rpc-server)))

(if (get _parameters :cache)
  (defn cached-request [logic]
    (-> ; let's have a fast path for metadata
     .request (Take "target") (Hash.Keccak-256) (ToBase58) = .targetHash
     "cache/metadata/" >= .mdata-file
     .targetHash (AppendTo .mdata-file)
     (Maybe
      (->
       (ReadFile .mdata-file)
       (ExpectString))
      (->
       logic
       (WriteFile .mdata-file :Flush true)))))
  (defn cached-request [logic] logic))

(defn find-attributes []
  (->
   ; find custom attributes
   .mdata (Take "a")
   (When
    (IsNotNone)
    (->
     (Maybe
      (->
       (ExpectLike {"" ""} true)
       (ForEach
        (->
         (| (Take 0) = .tname)
         (| (Take 1) = .tvalue)
         ; maybe filter them here!
         {"trait_type" .tname
          "value" .tvalue} >> .attribs))))))))

(def headers {"Access-Control-Allow-Origin" "*"})

(defloop handler ; must be loop!
  (Http.Read) = .request

  (| (Sequence .attribs))

  (Take "target")
  (Log "target")

  ; fragment metadata request
  (| (Regex.Match #"\/\?ch=(\w+)&t=(\w+)&m=(\w+)&i=(\w+)&ib=(\w+)&mb=(\w+)") >= .match
     (Count .match)
     (When
      (Is 7)
      (->
       (Msg "fragment")

       (cached-request
        (->
         .match
         (set-rpc-server)
         (| (Take 2) (HexToBytes) (ToBase58) = .fragmentId)
         (| (Take 3) (HexToBytes) (ToBase58) = .mutableHash)
         (| (Take 4) = .includeCost (BigInt) (BigInt.ToString) = .includeCostString)
         (| (Take 5) = .iblock)
         (| (Take 6) = .mblock)

         ; fetch the mutable data to read parameters from
         .mblock
         (If
          (Is "0x00")
          (->
           ; the mutable data is within the full upload
           {"block-number" .iblock
            "frag-hash" .fragmentId
            "expected-to" fragments} (Log) (Do fetch-block-data-upload) (Take 1))
          (->
           ; the mutable data is within update
           {"block-number" .mblock
            "frag-hash" .mutableHash
            "expected-to" fragments} (Do fetch-block-data-update) (Take 0)))
         (Brotli.Decompress) (FromBytes) (ExpectTable) = .mdata

         ; build image url
         img-server >= .imageUrl
         ; we cache by hash images on the image server
         [.fragmentId .mutableHash] (Hash.Keccak-256) (ToBase58) (AppendTo .imageUrl)
         ".png" (AppendTo .imageUrl)

         ; build both normal and embedded player
         play-server >= .extUrl
         embed-server >= .animUrl
         "play.html" (AppendTo .extUrl)
         "embed.html" (AppendTo .animUrl)
         "?ch=" (AppendTo .extUrl) (AppendTo .animUrl)
         .chainIdString (AppendTo .extUrl) (AppendTo .animUrl)
         "&t=" (AppendTo .extUrl) (AppendTo .animUrl)
         .fragmentId (AppendTo .extUrl) (AppendTo .animUrl)
         "&w=" (AppendTo .extUrl)
         .mdata (Take "w") (ExpectInt) (ToString) (AppendTo .extUrl)
         "&h=" (AppendTo .extUrl)
         .mdata (Take "h") (ExpectInt) (ToString) (AppendTo .extUrl)

         ; build name
         .mdata (Take "t") (ExpectString) >= .name
         " [" (AppendTo .name)
         .fragmentId (Slice :To 4) (AppendTo .name)
         ".." (AppendTo .name)
         .fragmentId (Slice :From -2) (AppendTo .name)
         "]" (AppendTo .name)

         ; include cost attribute
         .includeCost
         (If (IsNot uint256-max)
             (-> {"trait_type" "Stake to include"
                  "value" .includeCostString})
             (-> {"trait_type" "Stake to include"
                  "value" "Unavailable"}))  >> .attribs

         (find-attributes)

         ; find custom description
         .mdata (Take "d")
         (If
          (IsNotNone)
          (-> (ExpectString))
          (-> "No description")) >= .description

         ; json response
         {"name" .name
          "description" .description
          "external_url" .extUrl
          "animation_url" .animUrl
          "image" .imageUrl
          "attributes" .attribs} (Log) (ToJson)))
       (Http.Response :Headers headers)

       ; we are done here
       (Restart))))

  ; entity metadata request
  (| (Regex.Match #"\/\?ch=(\w+)&id=(\w+)&e=(\w+)&m=(\w+)&d=(\w+)") > .match
     (Count .match)
     (When
      (Is 6)
      (->
       (Msg "entity")

       (cached-request
        (->
         .match
         (set-rpc-server)
         (| (Take 2) (BigInt) (BigInt.ToString) = .entityId)
         (| (Take 3) = .entityContract (HexToBytes) (ToBase58) = .b58Contract)
         (| (Take 4) (HexToBytes) (ToBase58) = .mutableHash)
         (| (Take 5) = .mblock)

         [] (Eth.EncodeCall entity-abi "getFragment") (ToHex) >= .callData
         (__eth-call .entityContract .callData .current-rpc-server)
         (Log)
         (Eth.DecodeCall entity-abi "getFragment")
         (Take 0) (ExpectBytes) >= .fragment-hash (Slice :From 12) > .fragment-hash

         [] (Eth.EncodeCall entity-abi "fragmentOwner") (ToHex) >= .callData
         (__eth-call .entityContract .callData .current-rpc-server)
         (Log)
         (Eth.DecodeCall entity-abi "fragmentOwner")
         (Take 0) (ExpectString) = .fragment-owner

         [.fragment-hash] (Eth.EncodeCall frag-abi "creatorOf") (ToHex) >= .callData
         (__eth-call fragments .callData .current-rpc-server)
         (Log)
         (Eth.DecodeCall frag-abi "creatorOf")
         (Take 0) (ExpectString) = .fragment-creator

         {"block-number" .mblock
          "frag-hash" .mutableHash
          "expected-to" .entityContract} (Log) (Do fetch-block-data-entity) (Take 0)
         (Brotli.Decompress) (FromBytes) (ExpectTable) = .mdata

         ; build image url
         img-server >= .imageUrl
         ; we cache by hash images on the image server
         [.entityId .entityContract .mutableHash] (Hash.Keccak-256) (ToBase58) (AppendTo .imageUrl)
         ".png" (AppendTo .imageUrl)

          ; build both normal and embedded player
         play-server >= .extUrl
         embed-server >= .animUrl
         "play.html" (AppendTo .extUrl)
         "embed.html" (AppendTo .animUrl)
         "?ch=" (AppendTo .extUrl) (AppendTo .animUrl)
         .chainIdString (AppendTo .extUrl) (AppendTo .animUrl)
         "&id=" (AppendTo .extUrl) (AppendTo .animUrl)
         .entityId (AppendTo .extUrl) (AppendTo .animUrl)
         "&e=" (AppendTo .extUrl) (AppendTo .animUrl)
         .b58Contract (AppendTo .extUrl) (AppendTo .animUrl)
         "&w=" (AppendTo .extUrl)
         .mdata (Take "w") (ExpectInt) (ToString) (AppendTo .extUrl)
         "&h=" (AppendTo .extUrl)
         .mdata (Take "h") (ExpectInt) (ToString) (AppendTo .extUrl)

         ; build name
         .mdata (Take "t") (ExpectString) >= .name

         (find-attributes)

         ; find custom description
         .mdata (Take "d")
         (If
          (IsNotNone)
          (-> (ExpectString))
          (-> "No description")) >= .description

         "\r\n\r\nCreated by [" (AppendTo .description)
         .fragment-creator (Slice :To 4) (AppendTo .description)
         ".." (AppendTo .description)
         .fragment-creator (Slice :From -2) (AppendTo .description)
         "](https://opensea.io/" (AppendTo .description)
         .fragment-creator (AppendTo .description)
         ")" (AppendTo .description)
         "\r\nFragment owned by [" (AppendTo .description)
         .fragment-owner (Slice :To 4) (AppendTo .description)
         ".." (AppendTo .description)
         .fragment-owner (Slice :From -2) (AppendTo .description)
         "](https://opensea.io/" (AppendTo .description)
         .fragment-owner (AppendTo .description)
         ")" (AppendTo .description)
         "\r\nPowered by [Fragcolor](https://fragcolor.com)" (AppendTo .description)

         ; json response
         {"name" .name
          "description" .description
          "external_url" .extUrl
          "animation_url" .animUrl
          "image" .imageUrl
          "attributes" .attribs} (ToJson)))
       (Http.Response :Headers headers)

       (Restart))))

  (Log "Invalid query"))


(defloop main
  (Http.Server handler :Port (get _parameters :port)))

(schedule Root main)
(run Root 0.1)